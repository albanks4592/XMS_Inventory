@model MigrationTool.Models.ApplicationVersion
@using MigrationTool.ViewModels

@{
    ViewBag.Title = "Details";
}

<!-- Header and breadcrumbs -->
@Html.Partial("_Breadcrumb", new Breadcrumb(ViewBag.Title, new BreadcrumbItem {LinkText = "Application Versions", ControllerName = "ApplicationVersion"}))
@if (User.IsInRole(MigrationTool.Roles.Edit) || User.IsInRole(MigrationTool.Roles.Admin))
{
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-default btn-lg pull-right" })
}
<h2>@ViewBag.Title</h2>

<dl class="dl-horizontal">
    <dt>@Html.DisplayNameFor(model => Model.Application)</dt>
    <dd>@Html.DisplayFor(model => Model.Application)</dd>

    <dt>@Html.DisplayNameFor(model => Model.Name)</dt>
    <dd>@Html.DisplayFor(model =>model.Name)</dd>

    <dt>@Html.DisplayNameFor(model => Model.EndOfLifeDate)</dt>
    <dd>@Html.DisplayFor(model => Model.EndOfLifeDate)</dd>
</dl>

<!-- Published Applications -->
<h2>Linked Published Applications</h2>
@using (Ajax.BeginForm("RemoveLinkedPublishedApplications", new AjaxOptions
{
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "linkedPublishedApplicationList",
    LoadingElementId = "linkedPublishedApplicationLoader",
    OnBegin = "$(\"#linkedPublishedApplicationLoader .spinner\").spin();",
    OnComplete = "$(\"#linkedPublishedApplicationLoader .spinner\").spin(false);",
    HttpMethod = "POST"
}))
{
    <input type="hidden" name="applicationVersionId" value="@Model.Id" />
    <div id="linkedPublishedApplicationList">
        @Html.Partial("_LinkedPublishedApplications", Model.PublishedApplications)
    </div>
    @Html.Partial("_Loader", "linkedPublishedApplicationLoader")
    if (User.IsInRole(MigrationTool.Roles.Edit) || User.IsInRole(MigrationTool.Roles.Admin))
    {
        <button type="submit" class="btn btn-default">Remove Selected</button>
        <button type="button" class="btn btn-default" data-toggle="modal" data-target="#addDialog" id="addDialogButton">Add</button>
    }
}

<div class="modal fade" id="addDialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span>&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Link Published Applications</h4>
            </div>
            <div class="modal-body">
                @using (Ajax.BeginForm("SearchPublishedApplicationMulti", "PublishedApplication", null, new AjaxOptions
                {
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "publishedApplicationSearchResults",
                    LoadingElementId = "publishedApplicationSearchLoader",
                    OnBegin = "$(\"#publishedApplicationSearchLoader .spinner\").spin();",
                    OnComplete = "$(\"#publishedApplicationSearchLoader .spinner\").spin(false);"
                }, new { id = "publishedApplicationSearchForm" }))
                {
                    string search = "";
                    <div class="input-group">
                        <input type="hidden" name="applicationVersionId" value="@Model.Id" />
                        @Html.TextBoxFor(model => search, new { @class = "form-control", id = "publishedApplicationSearchBox" })
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="submit">Search</button>
                        </span>
                    </div>
                    <div class="input-group">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" name="includeLinked" value="true" />
                                Include Published Applications that are already linked to another Application Version
                            </label>
                        </div>
                    </div>
                    <p></p>
                    @Html.Partial("_Loader", "publishedApplicationSearchLoader")
                    <div id="publishedApplicationSearchResults"></div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="addPublishedApplicationLink">Link</button>
            </div>
        </div>
    </div>
</div>

<h2>All Entitled Users</h2>
@{
    var users = Model.PublishedApplications.Where(x => x.XenAppFarm.ToBeMigrated).SelectMany(x => x.ActiveDirectoryGroups).SelectMany(x => x.EntitledUsers).Union(Model.PublishedApplications.Where(x => x.XenAppFarm.ToBeMigrated).SelectMany(x => x.EntitledUsers)).Distinct().ToList();
    var entitlement = from u in users
                group u by u.Division into g
                select new { Division = g.Key, Count = g.Count()};
            
    DateTime now = DateTime.Now.AddDays(-30);
    var launches = (from l in Model.PublishedApplications.Where(x => x.XenAppFarm.ToBeMigrated).SelectMany(x => x.PublishedApplicationLaunches)
                where l.StartTime >= now
                group l by l.EntitledUser.Division into g
                select new { Division = g.Key, Duration = TimeSpan.FromSeconds(g.Sum(x => x.Duration)) }).ToList();
                      
}          
<table class="table table-striped">
    <tr>
        <th>Division</th>
        <th class="text-right">Entitled Users</th>
        <th class="text-right">Usage Time (Past 30 Days)</th>
    </tr>
    @foreach (var item in entitlement.OrderByDescending(e => e.Count))
    {
        <tr>
            <th>@(item.Division == null ? "none" : item.Division.Name)</th>
            <td class="text-right">@Html.DisplayFor(model => item.Count, "IntThousands")</td>
            <td class="text-right">
                @{
                    var launchData = launches.Where(x => x.Division == item.Division).FirstOrDefault();
                    if (launchData != null)
                    {
                        int hours = (int)Math.Floor(launchData.Duration.TotalHours);
                        <text>@Html.DisplayFor(modelItem => hours, "IntThousands")h @(launchData.Duration.Minutes)m</text>
                    }
                    else
                    {
                        <text>0h 0m</text>
                    }
                }
            </td>
        </tr>
    }
    <tr>
        <th>Total</th>
        <th class="text-right">@Html.DisplayFor(modelItem => users.Count, "IntThousands")</th>
        <th class="text-right">
            @{
                TimeSpan totalTime = TimeSpan.FromSeconds(launches.Sum(x => x.Duration.TotalSeconds));
                int totalHours = (int)Math.Floor(totalTime.TotalHours);
            }
            @Html.DisplayFor(modelItem => totalHours, "IntThousands")h @(totalTime.Minutes)m
        </th>
    </tr>
</table>

@using (Ajax.BeginForm("GetUserList", new AjaxOptions
{
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "userListContainer",
    LoadingElementId = "userListLoader",
    OnBegin = "$(\"#userListLoader .spinner\").spin();",
    OnComplete = "$(\"#userListLoader .spinner\").spin(false);"
}))
{
    @Html.Hidden("applicationVersionId", Model.Id)
    <button type="submit" class="btn btn-default">Full User List</button>
    <p></p>
}
@Html.Partial("_Loader", "userListLoader")
<div id="userListContainer">
</div>
<p></p>

<!-- Business Solutions -->
<h2>Business Solutions</h2>
@Html.Partial("../BusinessSolution/_List", Model.PublishedApplications.Where(x => x.BusinessSolution != null).Select(x => x.BusinessSolution).Distinct().OrderBy(x => x.Name))

<!-- Notes and tags -->
<div class="row">
    <p></p>
    @if (User.IsInRole(MigrationTool.Roles.Edit) || User.IsInRole(MigrationTool.Roles.Admin))
    {
        <div class="col-md-6">
            @Html.Partial("_NoteForm", Model)
        </div>
    }
    
    <div class="col-md-6">
        @Html.Partial("_TagForm", Model)
    </div>
</div>

@Html.Partial("_NoteList", Model)

@section Scripts {
    <script type="text/javascript">
        $("#addDialog").on("show.bs.modal", function () {
            $("#publishedApplicationSearchResults").html("");
            $("#publishedApplicationSearchForm").each(function () {
                this.reset();
            });
        });

        $("#addDialog").on("shown.bs.modal", function () {
            $("#publishedApplicationSearchBox").focus();
        });

        $("#addPublishedApplicationLink").click(function () {
            var selectedApplications = $("input[name=selectedPublishedApplications]:checked", "#publishedApplicationSearchForm");
            if (selectedApplications.length > 0) {
                var guidList = [];
                selectedApplications.toArray().forEach(function (item) {
                    guidList.push(item.value);
                });
                updateApplicationLinks(guidList);
            }
        });

        function updateApplicationLinks(newGuids) {
            $.ajax({
                type: "POST",
                url: "/ApplicationVersion/SetPublishedApplicationLinks",
                traditional: true,
                data: {
                    publishedApplicationIds: newGuids,
                    applicationVersionId: "@Model.Id"
                },

                success: function (data) {
                    $("#linkedPublishedApplicationList").html(data);
                }
            });
        }
    </script>
}